#!/bin/zsh

# folders
setopt cdablevars
export notes=$HOME/syncthing/md/notes
export docs=$HOME/syncthing/md/docs
export work=$HOME/syncthing/md/work
export workt=$HOME/syncthing/md/work/todo.md
export logpath=$HOME/syncthing/log
export cabinet=$HOME/syncthing/cabinet/settings.json
export log=$logpath/cabinet/$(date +%Y-%m-%d)/LOG_DAILY_$(date +%Y-%m-%d).log
export sprints=$HOME/syncthing/md/docs/sprints

# personal sprints
if [ -d "$HOME/syncthing/md/docs/sprints" ]; then
  export sprint=$(find "$sprints" -type f -name "sprint [0-9]*.md" | sort -V | tail -n 1)
fi

newsprint() {
    # Extract the current sprint number
    local currentnum=${${sprint:t}//[^0-9]/}
    local nextnum=$((currentnum + 1))
    
    echo "Opening Sprint ${currentnum} to review. Press any key to continue."
    read -k1
    nvim "$sprint"
    
    echo "\nSprint ${currentnum} is closed! Press any key to begin Sprint ${nextnum}."
    read -k1
    
    # Calculate the next sprint number and create the new sprint file path
    local newsprint="$sprints/sprint $nextnum.md"
    
    # Copy the content of the current sprint to the new sprint file
    cp "$sprint" "$newsprint"

    # Generate the new first line and second line content
    local today=$(date "+%B %d, %Y" | tr '[:upper:]' '[:lower:]')
    local twoweeks=$(date -d "+14 days" "+%B %d, %Y" | tr '[:upper:]' '[:lower:]')
    local new_first_line="# sprint ${nextnum}"
    local new_second_line="- ${today} until mid-day ${twoweeks}"

    # Update the first and second lines of the new sprint file
    sed -i "1c\\${new_first_line}" "$newsprint"
    sed -i "2c\\${new_second_line}" "$newsprint"
    
    # Open the new sprint file
    nvim "$newsprint"
    echo "Welcome to Sprint ${nextnum}!"
}

# Function: Edit a file in $notes with nvim
vn() {
    [[ $# -eq 0 ]] && return

    filename="$*"

    if [[ "$(uname)" == "Darwin" ]]; then
        home_prefix_to_replace="/home/"
        home_prefix_replacement="/Users/"
    else
        home_prefix_to_replace="/Users/"
        home_prefix_replacement="/home/"
    fi

    filename="${filename%%.md}"
    
    if [[ "$filename" == /* ]]; then
        nvim "${filename/$home_prefix_to_replace/$home_prefix_replacement}.md"
    else
        nvim "$notes/$filename.md"
    fi
}

# cheat
function cheat() {
  local query="$*"
  local encoded_query=$(echo "$query" | sed 's/ /%20/g')
  curl "cheat.sh/$encoded_query"
}


# Set ls options
alias ls='ls -hal --color'

# Show calendar
alias cal='cal -B1 -A1; echo -e "\nUse ncal to display horizontally"'
alias ncal='ncal -B1 -A1'

# Use nvim as default editor
export EDITOR='nvim'
alias vim='nvim'

# Quick navigation aliases
alias cdh='cd ~'
alias cdg='cd ~/git'
alias cdam='cd ~/git/atlas-man'
alias cdc='cd ~/git/cabinet'
alias cddo='cd ~/git/dotfiles'
alias cdrm='cd ~/git/remindmail'
alias cdto='cd ~/git/tools'
alias cdw='cd ~/git/tyler.cloud'
alias b='cd ../'
alias x='exit'
alias cc='clear'
cdl() { cd "$a"; ls; }

# Enable Colors ðŸŽ¨
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Git aliases

# Block certain flags and patterns in git commands
function git() {
    # Check for blocked flags
    function check_flags() {
        for arg in "$@"; do
            if [[ "$arg" == "--no-verify" ]]; then
                echo "The --no-verify flag is blocked."
                return 1
            fi
        done
        return 0
    }

    # Check for prohibited patterns in files being committed
    function check_commit_files() {
        if [[ "$1" == "commit" ]]; then
            # Determine if -a flag is used
            local has_a_flag=false
            for arg in "$@"; do
                if [[ "$arg" == "-a" ]]; then
                    has_a_flag=true
                    break
                fi
            done

            # Get files that would be committed
            if $has_a_flag; then
                # Check all modified and staged files (includes -a behavior)
                files_to_check=$(git diff --name-only)
            else
                # Check only staged files
                files_to_check=$(git diff --cached --name-only)
            fi

            # Check each file for "# DEBUG" or "# debug"
            for file in $files_to_check; do
                if grep -qE '^\s*# DEBUG|^\s*# debug' "$file"; then
                    echo "Commit blocked: '$file' contains '# DEBUG' or '# debug'."
                    return 1
                fi
            done
        fi
        return 0
    }

    # Run all checks
    check_flags "$@" || return 1
    check_commit_files "$@" || return 1

    # Execute the actual git command
    command git "$@"
}

alias glog='git log --graph --pretty=format:"%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset" --abbrev-commit --date=relative'
alias gcm='git commit -m'
alias gch='git fetch && git checkout'
alias gb='git checkout -b'
alias gs='git status'
alias gclean='git branch --merged | egrep -v "(^\*|master|dev|main)" | xargs git branch -d'
alias gd='git diff'
alias gdd='git diff develop'
alias gp='git pull'
git config --global push.default current

gcam() {
    branch=$(git symbolic-ref --short HEAD)
    branch=${branch#*/}
    git add -A && git commit -m "$branch: $*"
}

# Useful scripts - see https://github.com/tylerjwoodfin
alias diary='python3 ~/git/tools/diary/main.py'
alias shorten='python3 ~/git/tools/shorten.py'
alias yt='python3 ~/git/tools/yt/main.py'
alias pitest='python3 ~/git/testfolder/test.py'
alias pibuild='python3 ~/git/tools/build/build.py'
alias turn='python3 ~/git/tools/kasalights/main.py'
alias notes='nnn ~/syncthing/md/notes'
alias docs='nnn ~/syncthing/md/docs'
alias work='nnn ~/syncthing/md/work'
alias lofi='bash ~/git/tools/lofi.sh'
alias v='python3 ~/git/voicegpt/main.py'
alias bike='python3 ~/git/tools/bike/price_calculator.py'
alias bluesky='python3 ~/git/tools/bluesky/main.py'

# remindmail - see https://github.com/tylerjwoodfin/remindmail
rmm() {
    local save=""
    if [[ "$1" == "--save" ]]; then
        save="--save"
        shift
    fi

    local when=""
    local title=""
    local extra_args=()
    
    # Capture the full input
    local full_input="$*"

    # If there's a comma, separate 'when' and remaining input
    if [[ "$full_input" == *,* ]]; then
        when="${full_input%%,*}"
        full_input="${full_input#*,}"
    fi

    # Initialize flags to capture title and extra arguments
    local is_reading_title=true
    local current_arg=""

    # Read words in full_input and process each
    for word in ${(z)full_input}; do
        if $is_reading_title; then
            # Detect start of extra arguments
            if [[ "$word" == --* ]]; then
                is_reading_title=false
                extra_args+=("$word")
            else
                # Append word to title
                title+="$word "
            fi
        else
            # Process extra arguments
            if [[ "$word" == --* ]]; then
                # Start a new argument in extra_args
                if [[ -n "$current_arg" ]]; then
                    extra_args+=("${current_arg% }")
                fi
                current_arg="$word"
            else
                # Append to the current extra argument
                current_arg+=" $word"
            fi
        fi
    done

    # Add the last accumulated extra argument if any
    if [[ -n "$current_arg" ]]; then
        extra_args+=("${current_arg% }")
    fi

    # Trim spaces from when and title
    when="${when#"${when%%[![:space:]]*}"}"
    when="${when%"${when##*[![:space:]]}"}"
    title="${title#"${title%%[![:space:]]*}"}"
    title="${title%"${title##*[![:space:]]}"}"

    # Build the command
    local cmd="remind"
    [[ -n $title ]] && cmd+=" --title '$title'"
    [[ -n $when ]] && cmd+=" --when '$when'"
    [[ -n $save ]] && cmd+=" $save"

    # Add each extra argument to the command, quoted
    for arg in "${extra_args[@]}"; do
        arg="${arg#"${arg%%[![:space:]]*}"}"
        arg="${arg%"${arg##*[![:space:]]}"}"
        cmd+=" '$arg'"
    done

    eval $cmd
}

rmmt() {
    remind --title "$*" --when "tomorrow"
}

rmmy() {
    rmm --save "$@"
}

rmmty() {
    remind --title "$*" --when "tomorrow" --save
}

rmml() {
    remind --title "$*" --when "later"
}

worka() {
    # adds to work todo list
    local file_path="$HOME/syncthing/md/work/todo.md"
    local new_task="- [ ] # $*"
    
    # insert the new task below the "## to do" header
    awk -v task="$new_task" '
    BEGIN {added = 0} # Flag to check if task is added
    {
        if ($0 ~ /^## to do/ && added == 0) { # Find the "## to do" header
            print $0 # Print the header
            print task # Print the new task right after the header
            added = 1 # Set the flag to avoid adding task again
        } else {
            print $0 # Print other lines as they are
        }
    }' "$file_path" > tmpfile && mv tmpfile "$file_path"
}

plex() {
    python3 ~/git/tools/youtube/main.py video "$@" -d ~/syncthing/video/YouTube
}

alias worka='worka'
alias rmmt='rmmt'
alias rmmy='rmmy'
alias rmmty='rmmty'
alias rmml='rmml'
alias rmmsl='rmm --later'
alias rmme='remind --edit'
alias rmmst='remind --show-tomorrow'
alias rmmsw='remind --show-week'
alias rmmti='remind -ti'
alias rmmtit='remind -ti --board Shopping --list-name Tyler'
alias rmmta='remind -ta'
alias rmmtai='remind -ta --board Shopping --list-name Tyler --item-name'
alias rmmtais='remind -ta --board Shopping --list-name Shared --item-name'
alias one-more-hour='python3 /home/tyler/git/tools/pihole/one_more_hour.py'

# atlas-man
addjira() {
    # Initialize arrays for the title and for additional arguments
    local title_args=()
    local extra_args=()

    # Loop through each argument
    for arg in "$@"; do
        if [[ "$arg" =~ ^-[a-zA-Z] ]]; then
            # If the argument starts with a dash followed by a letter, treat it as an extra argument
            extra_args+=("$arg")
        else
            # Otherwise, treat it as part of the title
            title_args+=("$arg")
        fi
    done

    # Join title arguments into a single string
    local title="${title_args[*]}"

    # Call atlasman with the title and extra arguments
    atlasman --jira --add-issue "$title" "${extra_args[@]}"
}

addshopping() {
    atlasman --trello --add-card "shopping" "$*"
}

# ollama
function llama() {
  local input="$*"
  ollama run llama3:latest "$input"
}


[ -z "$PS1" ] && return

# Aliases below this line won't be called during interactive sessions (e.g., scripts)
