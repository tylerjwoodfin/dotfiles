#!/bin/zsh

# folders
setopt cdablevars
export notes=$HOME/syncthing/md/notes
export docs=$HOME/syncthing/md/docs
export work=$HOME/syncthing/md/work
export workt=$HOME/syncthing/md/work/todo.md
export logpath=$HOME/syncthing/log
export cabinet=$HOME/syncthing/cabinet/settings.json
export log=$logpath/cabinet/$(date +%Y-%m-%d)/LOG_DAILY_$(date +%Y-%m-%d).log
export sprint=$(find "$HOME/syncthing/md/docs/sprints" -type f -name "sprint [0-9]*.md" | sort -V | tail -n 1)
export sprints=$HOME/syncthing/md/docs/sprints

# Function: Edit a file in $notes with nvim
vn() {
    if [[ -z "$1" ]]; then
        echo "Error: No argument provided"
        return 1
    fi

    # Strip '.md' if necessary
    filename="${1%%.md}"

    nvim "$notes/$filename.md"
}

# Function: Retrieve the path of a file in $notes
n() {
    if [[ -z "$1" ]]; then
        echo "Error: No argument provided"
        return 1
    fi

    # Set the filename as a variable
    filename="$notes/$1.md"

    # Return the file path
    echo "$filename"
}

# cheat
function cheat() {
  local query="$*"
  local encoded_query=$(echo "$query" | sed 's/ /%20/g')
  curl "cheat.sh/$encoded_query"
}


# Set ls options
alias ls='ls -hal --color'

# Show calendar
alias cal='cal -B1 -A1; echo -e "\nUse ncal to display horizontally"'
alias ncal='ncal -B1 -A1'

# Use nvim as default editor
export EDITOR='nvim'
alias vim='nvim'

# fff config
export FFF_KEY_CHILD2="off"
export FFF_KEY_PARENT2="off"

# Quick navigation aliases
alias cdh='cd ~'
alias cdg='cd ~/git'
alias cdto='cd ~/git/tools'
alias cddo='cd ~/git/dotfiles'
alias cdrm='cd ~/git/remindmail'
alias cdc='cd ~/git/cabinet'
alias cdw='cd ~/git/tyler.cloud'
alias b='cd ../'
alias x='exit'
alias cc='clear'
cdl() { cd "$a"; ls; }

# Enable Colors ðŸŽ¨
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# Git aliases
alias glog='git log --graph --pretty=format:"%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset" --abbrev-commit --date=relative'
alias gcm='git commit -m'
alias gch='git fetch && git checkout'
alias gb='git checkout -b'
alias gs='git status'
alias gclean='git branch --merged | egrep -v "(^\*|master|dev|main)" | xargs git branch -d'
alias gd='git diff'
alias gdd='git diff develop'
alias gp='git pull'
git config --global push.default current

gcam() {
    branch=$(git symbolic-ref --short HEAD)
    branch=${branch#*/}
    git add -A && git commit -m "$branch: $*"
}

# Useful scripts - see https://github.com/tylerjwoodfin
alias diary='python3 ~/git/tools/diary/main.py'
alias shorten='python3 ~/git/tools/shorten.py'
alias yt='python3 ~/git/tools/yt/main.py'
alias pitest='python3 ~/git/testfolder/test.py'
alias pibuild='python3 ~/git/tools/build/build.py'
alias turn='python3 ~/git/tools/kasalights/main.py'
alias notes='fff ~/syncthing/md/notes'
alias docs='fff ~/syncthing/md/docs'
alias work='fff ~/syncthing/md/work'
alias lofi='bash ~/git/tools/lofi.sh'
alias v='python3 ~/git/voicegpt/main.py'
alias bike='python3 ~/git/tools/bike/price_calculator.py'

# remindmail - see https://github.com/tylerjwoodfin/remindmail
rmm() {
    local save=""
    if [[ "$1" == "--save" ]]; then
        save="--save"
        shift
    fi

    local when=""
    local title=""
    local extra_args=()

    # Check if the first argument contains a comma, indicating a `when` clause
    if [[ "$1" == *,* ]]; then
        # Split the first argument by comma to separate `when` and `title`
        when="${1%,*}"
        title="${1#*,}"
        shift
    fi

    # Collect the rest of the title if `when` is set, or start building title otherwise
    while [[ $# -gt 0 ]]; do
        if [[ "$1" == --* ]]; then
            break
        else
            title+="$1 "
            shift
        fi
    done

    # Trim leading/trailing spaces for both `when` and `title`
    when="${when#" "}"
    when="${when%" "}"
    title="${title%" "}"

    # Collect remaining arguments as additional options
    extra_args=("$@")

    # Build the command
    local cmd="remind --title '$title'"
    [[ -n $when ]] && cmd+=" --when '$when'"
    [[ -n $save ]] && cmd+=" $save"
    cmd+=" ${extra_args[@]}"

    eval $cmd
}



rmmt() {
    remind --title "$*" --when "tomorrow"
}

rmmy() {
    rmm --save "$@"
}

rmmty() {
    remind --title "$*" --when "tomorrow" --save
}

rmml() {
    remind --title "$*" --when "later"
}

worka() {
    # adds to work todo list
    local file_path="$HOME/syncthing/md/work/todo.md"
    local new_task="- [ ] # $*"
    
    # insert the new task below the "## to do" header
    awk -v task="$new_task" '
    BEGIN {added = 0} # Flag to check if task is added
    {
        if ($0 ~ /^## to do/ && added == 0) { # Find the "## to do" header
            print $0 # Print the header
            print task # Print the new task right after the header
            added = 1 # Set the flag to avoid adding task again
        } else {
            print $0 # Print other lines as they are
        }
    }' "$file_path" > tmpfile && mv tmpfile "$file_path"
}

plex() {
    python3 ~/git/tools/yt/main.py video "$@" -d ~/syncthing/video/YouTube
}

alias worka='worka'
alias rmmt='rmmt'
alias rmmy='rmmy'
alias rmmty='rmmty'
alias rmml='rmml'
alias rmmsl='rmm --later'
alias rmme='remind --edit'
alias rmmst='remind --show-tomorrow'
alias rmmsw='remind --show-week'
alias rmmj='remind --jira'
alias rmmti='remind -ti'
alias rmmtit='remind -ti --board Shopping --list-name Tyler'
alias rmmta='remind -ta'
alias rmmtai='remind -ta --board Shopping --list-name Tyler --item-name'
alias rmmtais='remind -ta --board Shopping --list-name Shared --item-name'
alias one-more-hour='python3 /home/tyler/git/tools/pihole/one_more_hour.py'

# Check weather
alias weather='curl wttr.in/?2QF'

# ollama
function llama() {
  local input="$*"
  ollama run llama3:latest "$input"
}


[ -z "$PS1" ] && return

# Aliases below this line won't be called during interactive sessions (e.g., scripts)
