- hosts: localhost
  become: yes
  gather_facts: yes
  tags:
    - all

  tasks:
    - name: Gather system facts
      setup:
      tags: always
    # üîπ Install Homebrew (Mac only)
    - name: Install Homebrew (macOS)
      block:
        - name: Install Homebrew
          shell: >
            /bin/zsh -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          args:
            creates: /usr/local/bin/brew
          when: ansible_os_family == "Darwin"
          tags: homebrew
      rescue:
        - name: Log Homebrew installation failure
          debug:
            msg: "‚ö†Ô∏è Homebrew installation failed, continuing."
          tags: homebrew

    # üîπ Install CLI tools (Mac & Linux)
    - name: Install CLI tools (Mac)
      block:
        - name: Install CLI tools
          homebrew:
            name:
              - zsh
              - neovim
              - curl
              - git
              - jq
              - make
              - docker
              - nnn
              - borgbackup
            state: present
          become: false
          when: ansible_facts['os_family'] == "Darwin" or ansible_facts['os_family'] == "MacOS"
          tags: cli
      rescue:
        - name: Log Mac CLI tool installation failure
          debug:
            msg: "‚ö†Ô∏è CLI tools installation failed on Mac, continuing."
          tags: cli

    - name: Install CLI tools (Ubuntu)
      block:
        - name: Remove conflicting containerd package (if exists)
          apt:
            name: containerd
            state: absent
          when: ansible_os_family == "Debian"
          tags: cli

        - name: Install CLI tools
          apt:
            name:
              - zsh
              - neovim
              - curl
              - git
              - jq
              - make
              - docker.io
              - nnn
              - syncthing
              - borgbackup
              - net-tools
              - chrome-gnome-shell
              - input-remapper
              - ufw
            state: present
            update_cache: yes
          when: ansible_os_family == "Debian"
          tags: cli
      rescue:
        - name: Log Ubuntu CLI tool installation failure
          debug:
            msg: "‚ö†Ô∏è CLI tools installation failed on Ubuntu, continuing."
          tags: cli

    # üîπ Install GUI Apps (Mac)
    - name: Install GUI apps (Mac)
      block:
        - name: Install GUI apps
          homebrew_cask:
            name:
              - arc
              - visual-studio-code
              - brave-browser
              - tor-browser
              - librewolf
              - zettlr
              - syncthing
              - rustdesk
            state: present
          become: false
          when: ansible_facts['os_family'] == "Darwin" or ansible_facts['os_family'] == "MacOS"
          tags: gui
      rescue:
        - name: Log Mac GUI apps installation failure
          debug:
            msg: "‚ö†Ô∏è GUI apps installation failed on Mac, continuing."
          tags: gui

    # üîπ Install GUI Apps (Ubuntu)
    - name: Install GUI apps (Ubuntu)
      block:
        - name: Add Brave Browser repository
          shell: |
            sudo apt install curl -y
            sudo curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main" | sudo tee /etc/apt/sources.list.d/brave-browser-release.list
            sudo apt update
          args:
            creates: /etc/apt/sources.list.d/brave-browser-release.list
          tags: gui

        - name: Install Brave, Tor, and VS Code
          apt:
            name:
              - brave-browser
              - torbrowser-launcher
            state: present
          tags: gui

        - name: Install VS Code (Snap)
          snap:
            name: code
            classic: yes
          tags: gui

        - name: Install Syncthing (Ubuntu)
          apt:
            name: syncthing
            state: present
          tags: gui

        - name: Install Rustdesk (Ubuntu)
          apt:
            name: rustdesk
            state: present
          tags: gui

      when: ansible_os_family == "Debian"
      tags: gui
      rescue:
        - name: Log Ubuntu GUI apps installation failure
          debug:
            msg: "‚ö†Ô∏è GUI apps installation failed on Ubuntu, continuing."
          tags: gui

    - name: Configure SSH and clone all GitHub repos
      block:
        - name: Ensure .ssh directory exists with correct permissions
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}/.ssh"
            state: directory
            mode: '0700'
            owner: "{{ ansible_env.USER }}"
          tags: ssh, clone

        - name: Ensure SSH key exists
          ansible.builtin.command: "ssh-keygen -t rsa -b 4096 -f {{ ansible_env.HOME }}/.ssh/id_rsa -N ''"
          args:
            creates: "{{ ansible_env.HOME }}/.ssh/id_rsa"
          become: false
          tags: ssh, clone

        - name: Display SSH public key (manual step)
          ansible.builtin.command: "cat {{ ansible_env.HOME }}/.ssh/id_rsa.pub"
          register: ssh_pubkey
          changed_when: false
          tags: ssh, clone

        - name: Prompt user to add SSH key to GitHub
          ansible.builtin.debug:
            msg: |
              üîë Add this SSH key to GitHub: https://github.com/settings/keys
              {{ ssh_pubkey.stdout }}
          tags: ssh, clone

        - name: Test SSH connection to GitHub
          ansible.builtin.command: "ssh -T git@github.com"
          register: ssh_test
          failed_when: ssh_test.rc != 1  # Expecting "Hi <user>! You've successfully authenticated, but GitHub does not provide shell access."
          changed_when: false
          tags: ssh, clone

        - name: Clone repositories using SSH
          ansible.builtin.shell: >
            UserName=tylerjwoodfin;
            curl -s https://api.github.com/users/$UserName/repos?per_page=1000 |
            jq -r '.[]|.ssh_url' | xargs -I {} git clone {}
          args:
            chdir: "{{ ansible_env.HOME }}/git"
          tags: clone

      rescue:
        - name: Log repo cloning failure
          ansible.builtin.debug:
            msg: "‚ö†Ô∏è Cloning GitHub repositories failed, continuing."
          tags: clone

    # üîπ Install Miscellaneous Tools
    - name: Install CopyQ (Clipboard Manager)
      block:
        - name: Install CopyQ
          apt:
            name: copyq
            state: present
          when: ansible_os_family == "Debian"
          tags: copyq
      rescue:
        - name: Log CopyQ installation failure
          debug:
            msg: "‚ö†Ô∏è CopyQ installation failed, continuing."
          tags: copyq

    - name: Install Pihole
      block:
        - name: Install PiHole dependencies
          apt:
            name: 
              - curl
              - wget
              - git
            state: present
          when: ansible_os_family == "Debian"
          tags: pihole

        - name: Install PiHole
          ansible.builtin.shell:
            cmd: "curl -sSL https://install.pi-hole.net | bash -s -- --unattended"
            executable: /bin/bash
          become: true
          args:
            creates: /etc/pihole/setupVars.conf
          when: ansible_os_family == "Debian"
          tags: pihole
      rescue:
        - name: Log PiHole installation failure
          ansible.builtin.debug:
            msg: "‚ö†Ô∏è PiHole installation failed, continuing."
          tags: pihole

    # üîπ Install Cabinet and Remindmail
    - name: Ensure pipx is installed
      ansible.builtin.package:
        name: pipx
        state: present
      become: true
      tags: python

    - name: Ensure pipx is in PATH
      ansible.builtin.shell: "eval $(pipx ensurepath)"
      args:
        executable: /bin/bash
      changed_when: false
      tags: python

    - name: Install Cabinet (Python Package via pipx)
      block:
        - name: Install Cabinet via pipx
          ansible.builtin.shell: "pipx install cabinet"
          args:
            executable: /bin/bash
          tags: python

      rescue:
        - name: Log Cabinet installation failure
          ansible.builtin.debug:
            msg: "‚ö†Ô∏è Cabinet Python package installation failed, continuing."
          tags: python

    - name: Install RemindMail (Python Package via pipx)
      block:
        - name: Install RemindMail via pipx
          ansible.builtin.shell: "pipx install remindmail"
          args:
            executable: /bin/bash
          tags: python

      rescue:
        - name: Log RemindMail installation failure
          ansible.builtin.debug:
            msg: "‚ö†Ô∏è RemindMail Python package installation failed, continuing."
          tags: python


    # üîπ MacOS Defaults
    - name: Apply MacOS defaults
      block:
        - name: Execute mac.sh script using zsh
          ansible.builtin.command:
            cmd: zsh ../scripts/mac.sh
          args:
            chdir: "{{ playbook_dir }}"
          register: script_output
          tags: mac_defaults

        - name: Show script output
          debug:
            var: script_output.stdout
          when: ansible_os_family == "Darwin"
          tags: mac_defaults
      rescue:
        - name: Log MacOS defaults script failure
          debug:
            msg: "‚ö†Ô∏è mac.sh execution failed, continuing."
          tags: mac_defaults

    - name: Configure iTerm2 to load preferences from dotfiles
      block:
        - name: Install iTerm2
          homebrew_cask:
            name: iterm2
            state: present
          become: false
          tags: iterm2

        - name: Configure iTerm2 to load preferences from dotfiles
          shell: >
            defaults write com.googlecode.iterm2 PrefsCustomFolder -string "{{ ansible_env.HOME }}/git/dotfiles/mac/iterm2" &&
            defaults write com.googlecode.iterm2 LoadPrefsFromCustomFolder -bool true
          become: false
          tags: iterm2
      when: ansible_facts['os_family'] == "Darwin" or ansible_facts['os_family'] == "MacOS"
      tags: iterm2

    # üîπ Configure Git
    - name: Configure Git settings
      vars:
        git: "{{ ansible_env.HOME }}/git"
      block:
        - name: Apply Pre-push hooks
          shell: zsh {{ git }}/tools/githooks/apply_pre-push.sh
          args:
            executable: /bin/zsh
          tags: git

        - name: Set Git email defaults
          ansible.builtin.git_config:
            name: user.email
            value: 14207553+tylerjwoodfin@users.noreply.github.com
            scope: global
          tags: git

        - name: Set Git name defaults
          ansible.builtin.git_config:
            name: user.name
            value: "Tyler Woodfin"
            scope: global
          tags: git

        - name: Link global .gitignore to Git configuration
          ansible.builtin.git_config:
            name: core.excludesfile
            value: "{{ git }}/dotfiles/.gitignore"
            scope: global
          tags: git

      rescue:
        - name: Log Git configuration failure
          debug:
            msg: "‚ö†Ô∏è Git configuration failed, continuing."
          tags: git

    # üîπ Configure SSH Authorized Keys
    - name: Apply the shared authorized_keys file
      block:
        - name: Update sshd_config with authorized_keys file path
          ansible.builtin.lineinfile:
            path: /etc/ssh/sshd_config
            regexp: '^AuthorizedKeysFile'
            line: 'AuthorizedKeysFile %h/.ssh/authorized_keys {{ ansible_env.HOME }}/docs/network/authorized_keys.md'
            state: present
          become: true
          tags: ssh

        - name: Set authorized_keys notice
          copy:
            content: |
              # this file is empty.
              # authorized public keys are stored in ~/syncthing/md/docs/network/authorized_keys.md.
              # For instructions, see ~/syncthing/md/docs/network/ssh for instructions.
            dest: "{{ ansible_env.HOME }}/.ssh/authorized_keys"
            mode: '0644'
          tags: ssh

        - name: Ensure correct directory permissions
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}"
            state: directory
            mode: '0700'
            recurse: yes
          tags: ssh

        - name: Ensure correct ownership of directories
          ansible.builtin.file:
            path: "{{ ansible_env.HOME }}"
            state: directory
            owner: "{{ ansible_env.USER }}"
            recurse: yes
          tags: ssh

        - name: Configure UFW
          ufw:
            rule: allow
            name: OpenSSH
            state: enabled
            policy: deny
            default_deny: yes
            allow_ssh: yes
          when: ansible_os_family == "Debian"
          tags: ssh

        - name: Restart SSH service (Linux only)
          systemd:
            name: sshd
            state: restarted
          when: ansible_os_family == "Debian"
          tags: ssh

      rescue:
        - name: Log SSH configuration failure
          debug:
            msg: "‚ö†Ô∏è SSH authorized_keys setup failed, continuing."
          tags: ssh

    - name: Link vim.lua to Neovim init.lua
      block:
        - name: Append vim.lua reference to init.lua
          ansible.builtin.lineinfile:
            path: "{{ ansible_env.HOME }}/.config/nvim/init.lua"
            line: |
              -- added by dotfiles on {{ ansible_date_time.date }}
              dofile('{{ ansible_env.HOME }}/git/dotfiles/vim.lua')
            create: yes
          tags: vim

      rescue:
        - name: Log failure to link vim.lua
          ansible.builtin.debug:
            msg: "‚ö†Ô∏è Failed to link vim.lua to init.lua, continuing."
          tags: vim

    - name: Set Zsh as the default shell
      block:
        - name: Ensure Zsh is installed
          ansible.builtin.package:
            name: zsh
            state: present
          become: true
          tags: zsh

        - name: Change default shell to Zsh
          ansible.builtin.shell: "chsh -s $(which zsh) {{ ansible_env.USER }}"
          become: true
          tags: zsh

      rescue:
        - name: Log failure to set Zsh as default shell
          ansible.builtin.debug:
            msg: "‚ö†Ô∏è Failed to set Zsh as the default shell, continuing."
          tags: zsh

    # üîπ Configure .zshrc
    - name: Ensure custom dotfiles config is in .zshrc
      ansible.builtin.blockinfile:
        path: "{{ ansible_env.HOME }}/.zshrc"
        marker: "# {mark} DOTFILES CONFIG"
        block: |
          export DOTFILES_OPTS=(common network nnn) # adjust as needed; other options: not-cloud, nnn, network, phone
          if [ -f $HOME/git/dotfiles/zsh/common.zsh ]; then
              source $HOME/git/dotfiles/zsh/common.zsh
          fi
        create: yes
      tags: zshrc
